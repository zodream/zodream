<?php
namespace Zodream\Infrastructure\Session;
/**
 * Created by PhpStorm.
 * User: zx648
 * Date: 2016/3/6
 * Time: 9:56
 */
class CacheSession extends Session {

    public function useCustomStorage() {
        return true;
    }

    public function openSession($savePath, $sessionName)
    {
        return parent::openSession($savePath, $sessionName);
    }

    public function closeSession()
    {
        return parent::closeSession(); // TODO: Change the autogenerated stub
    }

    public function readSession($id)
    {
        $data = $this->cache->get($this->calculateKey($id));

        return $data === false ? '' : $data;
    }

    public function writeSession($id, $data)
    {
        return parent::writeSession($id, $data); // TODO: Change the autogenerated stub
    }

    public function destroySession($id)
    {
        return parent::destroySession($id); // TODO: Change the autogenerated stub
    }

    public function gcSession($maxLifetime)
    {
        return parent::gcSession($maxLifetime); // TODO: Change the autogenerated stub
    }

    /**
     * Session write handler.
     * Do not call this method directly.
     * @param string $id session ID
     * @param string $data session data
     * @return boolean whether session write is successful
     */
    public function writeSession($id, $data)
    {
        return $this->cache->set($this->calculateKey($id), $data, $this->getTimeout());
    }

    /**
     * Session destroy handler.
     * Do not call this method directly.
     * @param string $id session ID
     * @return boolean whether session is destroyed successfully
     */
    public function destroySession($id)
    {
        return $this->cache->delete($this->calculateKey($id));
    }

    /**
     * Generates a unique key used for storing session data in cache.
     * @param string $id session variable name
     * @return mixed a safe cache key associated with the session variable name
     */
    protected function calculateKey($id)
    {
        return [__CLASS__, $id];
    }
}